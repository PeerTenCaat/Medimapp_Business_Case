##################################
###                            ###
###   DETERMINE ACTIVE USERS   ###
###                            ###
##################################

# This code contains all functions needed to determine active users of Medimapp
# To perform a function (section of code), all other sections need to be commented.


##########################
#   Importing Packages   #
##########################


import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
from datetime import datetime
import Peer_Econometrics as PE
import matplotlib.patches as mpatches
from scipy import stats

##########################################
#   Functions used throughout the file   #
##########################################

def filterCare(Data, WPlist, CPlist, Loclist, Artlist, CLlist, IsCare = "0", inplace=True):  # Filters all logins from the new pathways set that are not by patients
    indexNames = Data[Data.ISCAREPROVIDER != IsCare].index
    indices = sorted(indexNames, reverse=True)
    for idx in indices:
        if ((idx < len(WPlist)) and (idx < len(CPlist)) and (idx < len(Loclist)) and (idx < len(Artlist))):
            WPlist.pop(idx)
            CPlist.pop(idx)
            Loclist.pop(idx)
            Artlist.pop(idx)
            CLlist.pop(idx)
    Data.drop(indexNames, inplace = True)
    if inplace:
        Data.reset_index(drop=True, inplace=inplace)
    else: return Data.reset_index(drop=True, inplace=inplace)

def dropTrial(Data, ip=True):  # Drops logins made my Trial patients.
    todrop = []
    for i in range(len(Data)):
        if(Data.PATIENTNUMBER[i][0] == "T" or Data.PATIENTNUMBER[i][0] == "t"):
            todrop.append(i)
    if ip:
        Data.drop(todrop, inplace = ip)
        Data.reset_index(drop=True, inplace=ip)
    else: return Data.drop(todrop, inplace = ip)

def DropFeature(Data, featurestring, ip=True):  # Drops logins in pathways where the patient did not use a certain feature.
    todrop = []
    for i in range(len(Data)):
        if(Data[featurestring][i] == "0"):
            todrop.append(i)
    if ip:
        Data.drop(todrop, inplace = ip)
        Data.reset_index(drop=True, inplace=ip)
    else: return Data.drop(todrop, inplace = ip)

def FilterFeature(Data, featurestring, ip=True):  # Drops patients from pathways that never used a certain feature.
    todrop = []
    patientlist = []
    for i in range(len(Data)):
        if(Data[featurestring][i] != "0"):
            patientlist.append(Data.PATIENTNUMBER[i])
    patientlist = list(set(patientlist))
    for i in range(len(Data)):
        if(Data.PATIENTNUMBER[i] not in patientlist):
            todrop.append(i)
    if ip:
        Data.drop(todrop, inplace = ip)
        Data.reset_index(drop=True, inplace=ip)
    else: return Data.drop(todrop, inplace = ip)

def ToDateTime(Statistics):  # Turns a the datetime strings in statistics into the datetime dtype.
    for i in range(len(Statistics.DATETIME)):
        print(i)
        D = Statistics.DATETIME[i][11:]
        d = datetime.strptime(D, "%H:%M:%S.%f")
        Statistics.DATETIME[i] = d

# Function to help check whether a new login started.
def IsLoginType(Info):
    if (Info == "Login/Get" or Info == "Login/Token" or Info == "Login/Post"):
        return True
    return False

# The following function links a login in pathways to the information in statistics (if possible) and returns a list with:
# 0) Whether this login was valid (so it lasted >30 sec and at least 1 waypoint was checked)
# 1) An index for time saving.
# 2) The number of unique waypoints visited during the login.
# 3) The number of careprovider pages visited during the login.
# 4) The number of location pages visited during the login.
# 5) The number of article pages visited during the login.
# 6) The number of checklist actions done during the login.
def IsValidLoginNEW(PathwaysDateTime, PatientID, Statistics, index):
    WP = 0
    CP = 0
    Loc = 0
    Art = 0
    CL = 0
    bool = False
    i = index
    starttime = datetime.strptime("1721-06-11 20:21:22.123", "%Y-%m-%d %H:%M:%S.%f") #Random starttime that we update
    problem = datetime.strptime("1721-06-11 20:21:22.123", "%Y-%m-%d %H:%M:%S.%f") #Check for problem (like the login not being there)
    while (i < len(Statistics.PATIENTID) and (Statistics.PATIENTID[i] != PatientID or (Statistics.PATIENTID[i] == PatientID and (abs((Statistics.DATETIME[i] - PathwaysDateTime).total_seconds()) > 60 or not(IsLoginType(Statistics.INFO[i])))))): #This is too make sure you don't have ot go through all of statistics for every patient
        if (Statistics.DATETIME[i] > PathwaysDateTime and abs((Statistics.DATETIME[i] - PathwaysDateTime).total_seconds()) > 3600):
            return ([False, 0])
        i += 1
    if (i < len(Statistics.PATIENTID)): #If we have found a login in statistics with matching patientID to the one in pathways, then we note the starttime
        starttime = Statistics.DATETIME[i]
        i += 1
    while (i < len(Statistics.PATIENTID) and IsLoginType(Statistics.INFO[i])):
        i += 1
    Waypointlist = []
    timecheck = starttime
    endtime = starttime
    j=0
    while (i < len(Statistics.PATIENTID) and  not(Statistics.PATIENTID[i] == PatientID and IsLoginType(Statistics.INFO[i])) and abs((timecheck - starttime).total_seconds()) < 86400): #We know a login is done, when we encounter a new patientID or a new Login/Token
        timecheck = Statistics.DATETIME[i]
        if(Statistics.PATIENTID[i] == PatientID):
            endtime = Statistics.DATETIME[i]
            if(Statistics.INFO[i] == "Waypoint/Index" and Statistics.DETAILS[i] != "nan"):
                if(Statistics.DETAILS[i] not in Waypointlist): #We only want to count different waypoints for each login
                    Waypointlist.append(Statistics.DETAILS[i])
                    print(Statistics.DETAILS[i])
                    WP += 1
            if (Statistics.INFO[i] == "CareProvider/Index"):
                CP += 1
            if (Statistics.INFO[i] == "Location/Index"):
                Loc += 1
            if (Statistics.INFO[i] == "Article/Index"):
                Art += 1
            if (Statistics.INFO[i] == "Checklist/Post"):
                CL += 1
        else:
            j += 1
        i += 1
    print(len(Waypointlist), "   ", WP)
    print("Statstart: ", starttime, "   Pathstart: ",PathwaysDateTime, "    tot.sec: ", (starttime - PathwaysDateTime).total_seconds())
    print(endtime)
    if(starttime == problem or ((starttime - PathwaysDateTime).total_seconds() >= 60)): #If there was no login found or the starttime we found was too far off from the time in pathways, then the login is invalid
        return ([False, 0])
    if((endtime - starttime).total_seconds() > 30): #Now if the login lasted longer than 30 sec, then we count it as a valid login
        bool = True
    if(j>0):
        return ([bool, 0, WP, CP, Loc, Art, CL])
    return([bool, i - index, WP, CP, Loc, Art, CL]) #Returns the bool for wheter the login is valid, and adds the index s.t. the program runs faster and we keep matching the right ones

# The following function links pathways and statistics, already filtering for active users and also adding the information explained for the previous function about the features used.
def DropInvalidLoginsNEW(Pathways, Statistics, WPlist, CPlist, Loclist, Artlist, CLlist, ip=True):
    toDrop = []
    index = 0
    for i in range(len(Pathways.PATIENTID)):
        print(Pathways.PATIENTID[i])
        Check = IsValidLoginNEW(Pathways.DATETIME[i], Pathways.PATIENTID[i], Statistics, index)
        if(Check[0] != True):
            toDrop.append(i)
        else:
            WPlist.append(Check[2])
            CPlist.append(Check[3])
            Loclist.append(Check[4])
            Artlist.append(Check[5])
            CLlist.append(Check[6])
        index += Check[1]
    if ip:
        Pathways.drop(toDrop, inplace = ip)
        Pathways.reset_index(drop=True, inplace=ip)
    else: return Pathways.drop(toDrop, inplace = ip)

# Function that turns datetime string into dtype datetime.
def CreateDate(DateTimeStr):
    year = DateTimeStr[:4]
    month = DateTimeStr[5:7]
    day = DateTimeStr[8:10]

    date = Date(year, month, day)
    return date

# Function that determines the number of days between two datetimes.
def DayDifference(DateTimestr1, DateTimestr2):
    D1 = DateTimestr1[:10]
    D2 = DateTimestr2[:10]
    d1 = datetime.strptime(D1, "%Y-%m-%d")
    d2 = datetime.strptime(D2, "%Y-%m-%d")
    return abs((d2-d1).days)

# Function that determines the mean number of days betwee  a list of datetimes.
def MeanDayDifference(DateTimeList):
    Number = 0
    Total = 0
    for i in range(1, len(DateTimeList)):
        x = DayDifference(DateTimeList[i], DateTimeList[i-1])
        if (x>0):
            Total += x
            Number += 1
    if (Number > 0):
        return Total/Number
    return 0

# Function that determines the mean number of waypoints for a list.
def MeanWP(WaypointList):
    sum = 0
    for i in range(len(WaypointList)):
        sum += int(WaypointList[i])
    return sum/len(WaypointList)

# Function that determines the total number of waypoints visited for a list.
def TotalWP(WaypointList):
    sum = 0
    for i in range(len(WaypointList)):
        sum += int(WaypointList[i])
    return sum

# The following functions were used to differentiate between intensive users and mild users.
# This approach was dropped however, because the number of users was too small and it did not help with the research.

# Makes list of patients dat have at least MinWPmean number of unnique waypoints visited on average and at least MinNoLogin number of logins.
def MakePatientListWP(pathways, MinWPmean, MinNoLogin):
    PatientList = []
    PathwaysGrouped = pathways.groupby('PATIENTNUMBER')['WP'].apply(list).reset_index(name='WP')
    print(PathwaysGrouped)
    AllPatientList = list(PathwaysGrouped.PATIENTNUMBER)
    print(AllPatientList)
    WPList = list(PathwaysGrouped.WP)
    for i in(range(len(WPList))):
        WPmean = MeanWP(WPList[i])
        NoLogins = len(WPList[i])
        if(WPmean >= MinWPmean and NoLogins >= MinNoLogin):
            PatientList.append(AllPatientList[i])
    PatientList = list(set(PatientList))
    return PatientList

# Makes list of patients that have at least MinWPtotal number of waypoints visited in total and at least MinNoLogin number of logins.
def MakePatientListTotalWP(pathways, MinWPtotal, MinNoLogin):
    PatientList = []
    PathwaysGrouped = pathways.groupby('PATIENTNUMBER')['WP'].apply(list).reset_index(name='WP')
    print(PathwaysGrouped)
    AllPatientList = list(PathwaysGrouped.PATIENTNUMBER)
    print(AllPatientList)
    WPList = list(PathwaysGrouped.WP)
    for i in(range(len(WPList))):
        WPTotal = TotalWP(WPList[i])
        NoLogins = len(WPList[i])
        if(WPTotal >= MinWPtotal and NoLogins >= MinNoLogin):
            PatientList.append(AllPatientList[i])
    PatientList = list(set(PatientList))
    return PatientList

# Makes list of patients that visited at least MinNoArt number of article pages in total.
def MakePatientListArt(pathways, MinNoArt):
    PatientList = []
    PathwaysGrouped = pathways.groupby('PATIENTNUMBER')['ART'].apply(list).reset_index(name='ART')
    AllPatientList = list(PathwaysGrouped.PATIENTNUMBER)
    ARTList = list(PathwaysGrouped.ART)
    for i in range(len(ARTList)):
        sum=0
        for j in range(len(ARTList[i])):
            sum += int(ARTList[i][j])
        if (sum >= MinNoArt):
            PatientList.append(AllPatientList[i])
    PatientList = list(set(PatientList))
    return PatientList

# Makes list of patients that did at least MinNoCL number of checklist actions in total.
def MakePatientListCL(pathways, MinNoCL):
    PatientList = []
    PathwaysGrouped = pathways.groupby('PATIENTNUMBER')['CL'].apply(list).reset_index(name='CL')
    AllPatientList = list(PathwaysGrouped.PATIENTNUMBER)
    CLList = list(PathwaysGrouped.CL)
    for i in range(len(CLList)):
        sum=0
        for j in range(len(CLList[i])):
            if (int(CLList[i][j]) > 0):
                sum += 1
        if (sum >= MinNoCL):
            PatientList.append(AllPatientList[i])
    PatientList = list(set(PatientList))
    return PatientList

# Adds a column to the overview with a user class based on the functions above and the chosen numbers.
# 0 is given if the patient never used the app
# 2 is given if the patient used the app and also is in the PatientlisWP and in either the PatientListArt ot PatientlisCL, making them an intensive user.
# 1 is given otherwise.
def MakeUserList(overzicht, pathways, MinWPmean, MinNoLogin, MinNoArt, MinNoCL):
    UserList = []
    PatientListWP = MakePatientListWP(pathways, MinWPmean, MinNoLogin)
    print("WP", PatientListWP)
    PatientListArt = MakePatientListArt(pathways, MinNoArt)
    print("Art",PatientListArt)
    PatientListCL = MakePatientListCL(pathways, MinNoCL)
    print("CL",PatientListCL)
    for i in range(len(overzicht.Patientnummer)):
        if (overzicht["Aantal logins"][i] == "0"):
            UserList.append("0")
        elif ((overzicht.Patientnummer[i] in PatientListWP) and ((overzicht.Patientnummer[i] in PatientListArt) or (overzicht.Patientnummer[i] in PatientListCL))):
            UserList.append("2")
        else:
            UserList.append("1")
    return UserList

# Another way of defining users based on PatientListTotalWP.
def MakeSingleUserList(overzicht, pathways, MinWPtotal, MinNoLogin):
    UserList = []
    PatientListTotalWP = MakePatientListTotalWP(pathways, MinWPtotal, MinNoLogin)
    print("WP", PatientListTotalWP)
    for i in range(len(overzicht.Patientnummer)):
        if (overzicht["Aantal logins"][i] == "0"):
            UserList.append("0")
        elif ((overzicht.Patientnummer[i] in PatientListTotalWP)):
            UserList.append("1")
        else:
            UserList.append("0")
    return UserList

# The filtered pathways can sometimes match one login multiple times due to the slight inconsistency of the data. This function fixes that.
def DropPathwaysDoubles(Data, ip=True):
    todrop = []
    k = 0
    for i in range(len(Data)):
        print(i)
        if(k == 0):
            j = i+1
            k = 0
            while (j < len(Data) and Data.PATIENTNUMBER[i] == Data.PATIENTNUMBER[j] and (Data.DATETIME[i]-Data.DATETIME[j]).total_seconds() < 2):
                if(Data["No WAYPOINT"][i] == Data["No WAYPOINT"][j] and Data["No CAREPROVIDER"][i] == Data["No CAREPROVIDER"][j] and Data["No LOCATION"][i] == Data["No LOCATION"][j] and Data["No ARTICLE"][i] == Data["No ARTICLE"][j] and Data["No CHECKLIST"][i] == Data["No CHECKLIST"][j]):
                    if (j not in todrop):
                        todrop.append(j)
                    k += 1
                j += 1
        else:
            k = k - 1
    if ip:
        Data.drop(todrop, inplace = ip)
        Data.reset_index(drop=True, inplace=ip)
    else: return Data.drop(todrop, inplace = ip)



################################
### New Valid Logins Filter  ###
################################
# Creates the new pathways based on the functions above.

# Pathways = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\pathways.csv', skiprows = 1, usecols=[0,1,3,4,5,6,7], names=['PATIENTNUMBER','ID','PATHWAYID','PATIENTID','DATETIME','ISCAREPROVIDER','PATHWAYVARIANTID'], header = None, dtype = str)
# Statistics = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\statistics.csv', skiprows = 142, usecols=[1,2,4,5], names=['PATIENTID','DATETIME','INFO','DETAILS'], header = None, dtype = str)
#
# Statistics.DATETIME = pd.to_datetime(Statistics.DATETIME, format = "%Y-%m-%d %H:%M:%S.%f")
# Pathways.DATETIME = pd.to_datetime(Pathways.DATETIME, format = "%Y-%m-%d %H:%M:%S.%f")
# dropTrial(Pathways)
# WPList = []
# CPList = []
# LocList = []
# ArtList = []
# CLList = []
# DropInvalidLoginsNEW(Pathways, Statistics, WPList, CPList, LocList, ArtList, CLList)
# filterCare(Pathways, WPList, CPList, LocList, ArtList, CLList)
# Pathways.pop("ID")
# Pathways.pop("ISCAREPROVIDER")
# Pathways["No WAYPOINT"] = WPList
# Pathways["No CAREPROVIDER"] = CPList
# Pathways["No LOCATION"] = LocList
# Pathways["No ARTICLE"] = ArtList
# Pathways["No CHECKLIST"] = CLList
# Pathways.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Met_Mix.csv')



######################################
### Overzicht met gebruikersklasse ###
######################################
# Adds a column to an exiting overview with whether the patient is a user or not based on the MakeSingleUserList function.

# OverzichtNew = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_naMM_Voor_2020_begonnen_WITH_0.csv', skiprows = 1, usecols=[1,2,3], names=['Patientnummer','Aantal consulten','Aantal logins'], header = None, dtype = str)
# Pathways = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Mix_NoDoubles.csv', skiprows = 1, usecols=[1,6,7,8,9,10], names=['PATIENTNUMBER','WP','CP','LOC','ART','CL'], header = None, dtype = str)
#
# OverzichtNew["Gebruikersklasse"] = MakeSingleUserList(OverzichtNew, Pathways, 1, 1)
#
#
# OverzichtNew.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_naMM_Voor_2020_begonnen_1_1.csv')



######################################
### Overzicht met dummy variables  ###
######################################
# For an overview with a column containing the user class going form 0 to 2, this code turns that column into two columns with dummy variables for both class 1 and 2.

# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_met_Gebruikersklasse_3_3_1.csv', skiprows = 1, usecols=[1,2,3,4,5], names=['Patientnummer','Aantal consulten','Aantal logins','Aantal NietConsulten','Gebruikersklasse'], header = None, dtype = str)
#
# DummyMildUserList = ["0"]*len(Overzicht.Patientnummer)
# DummyFrequentUserList = ["0"]*len(Overzicht.Patientnummer)
#
# for i in range(len(Overzicht.Patientnummer)):
#     if (Overzicht.Gebruikersklasse[i] == "1"):
#         DummyMildUserList[i] = "1"
#     if (Overzicht.Gebruikersklasse[i] == "2"):
#         DummyFrequentUserList[i] = "1"
#
# Overzicht["IsMildeGebruiker"] = DummyMildUserList
# Overzicht["IsIntensieveGebruiker"] = DummyFrequentUserList
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_met_Dummies_3_3_1.csv')



#######################################################
### Pathways remove duplicates with different PV-ID ###
#######################################################
#This code removes the duplicates than can occur after initially filtering and linking the pathways data set.
#
# Pathways = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Met_Mix.csv', dtype = str)
#
# Pathways.DATETIME = pd.to_datetime(Pathways.DATETIME, format = "%Y-%m-%d %H:%M:%S.%f")
#
# DropPathwaysDoubles(Pathways)
# Pathways.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Mix_NoDoubles.csv', index=False)



#########################################
### Correct Overzicht voor regressie  ###
#########################################
# This code makes the overview set used for the linear regression in the research based on the chosen filtered pathways.

# Afspraken = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Consulten_BK.csv', skiprows = 1, usecols=[1,2,3,4,5], names=['APPNUMBER','PATIENTNUMBER','AFDELING','CODE','DATETIME'], header = None, dtype = str)
#
# Afspraken = Afspraken.sort_values(['PATIENTNUMBER', 'DATETIME'])
# Afspraken.DATETIME = pd.to_datetime(Afspraken.DATETIME, format = "%Y-%m-%d %H:%M")
#
# AfsprakenGrouped = Afspraken.groupby('PATIENTNUMBER')["DATETIME"].apply(list).reset_index(name='AFSPRAKEN')
# print(AfsprakenGrouped)
# patientlist = list(AfsprakenGrouped.PATIENTNUMBER)
# afsprakenlist = list(AfsprakenGrouped.AFSPRAKEN)
#
# Startlower = pd.to_datetime("1-1-2018 00:00", format = "%d-%m-%Y %H:%M")
# Startupper = pd.to_datetime("1-1-2020 00:00", format = "%d-%m-%Y %H:%M")
# Endupper = pd.to_datetime("31-12-2022 00:00", format = "%d-%m-%Y %H:%M")
#
#
# def NaMedimappList(patientlist, afsprakenlist, startlower, startupper, endupper):
#     List = []
#     for i in range(len(patientlist)):
#         afsprakenlist[i] = sorted(afsprakenlist[i])
#         print(afsprakenlist[i])
#         if (afsprakenlist[i][0] >= startlower and afsprakenlist[i][0] < startupper and afsprakenlist[i][-1] < endupper):
#             print("startlower: ", startlower, "; afspraaklower: ", afsprakenlist[i][0], "; startupper: ", startupper, "; afspraakupper: ", afsprakenlist[i][-1], "; endupper: ", endupper)
#             List.append(patientlist[i])
#     return List
#
# NaMMList = NaMedimappList(patientlist, afsprakenlist, Startlower, Startupper, Endupper)
#
# def DropNotNaMedimapp(Data, BetweenList, ip=True):
#     todrop = []
#     for i in range(len(Data)):
#         if(Data.PATIENTNUMBER[i] not in BetweenList):
#             todrop.append(i)
#     if ip:
#         Data.drop(todrop, inplace = ip)
#         Data.reset_index(drop=True, inplace=ip)
#     else: return Data.drop(todrop, inplace = ip)
#
# DropNotNaMedimapp(Afspraken,NaMMList)
#
# Afspraken.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Consulten_Na_MM_Voor_2020_begonnen.csv', index=False)


## OVERZICHT ##
# AfsprakenNew = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Consulten_Na_MM_Voor_2020_begonnen.csv', skiprows = 1, usecols=[2,5], names=['PATIENTNUMBER','DATETIME'], header = None, dtype = str)
# PathwaysNew = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Mix_NoDoubles.csv', skiprows = 1, usecols=[0,1], names=['ID','PATIENTNUMBER'], header = None, dtype = str)
#
# AfsprakenGrouped = AfsprakenNew.groupby('PATIENTNUMBER')
# PathwaysGrouped = PathwaysNew.groupby('PATIENTNUMBER')
# AfsprakenNewList = pd.DataFrame(AfsprakenGrouped.nunique())
# PatientList = list(AfsprakenNewList.index)
# AppNumberList = list(AfsprakenNewList.DATETIME)
# PathwaysNewList = pd.DataFrame(PathwaysGrouped.nunique())
# PatientList2 = list(PathwaysNewList.index)
# LoginsList = list(PathwaysNewList.ID)
#
# Patients = []
# Apps = []
# Logins = []
# for i in range(len(PatientList)):
#     if(not(PatientList[i] in PatientList2)):
#         Patients.append(PatientList[i])
#         Apps.append(AppNumberList[i])
#         Logins.append('0')
#     else:
#         for j in range(len(PatientList2)):
#             if(PatientList[i] == PatientList2[j]):
#                 Patients.append(PatientList[i])
#                 Apps.append(AppNumberList[i])
#                 Logins.append(LoginsList[j])
#
# data = {'Patientnummer': Patients, 'Aantal Afspraken': Apps, 'Aantal Logins': Logins}
# Overzicht = pd.DataFrame(data, columns = ['Patientnummer','Aantal Afspraken','Aantal Logins'])
#
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_naMM_Voor_2020_begonnen.csv')

## Aantal afspraken toevoegen ##
# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_naMM_Voor_2020_begonnen_1_1.csv', dtype = str)
# Overzicht2 = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Afspraken_NaMM_Voor_2020_begonnen.csv', dtype = str)
#
# PatientList = [None]*len(Overzicht.Patientnummer)
# for i in range(len(Overzicht.Patientnummer)):
#     for j in range(len(Overzicht2.Patientnummer)):
#         if(Overzicht.Patientnummer[i] == Overzicht2.Patientnummer[j]):
#             PatientList[i] = Overzicht2["Aantal Afspraken"][j]
#
# Overzicht["Aantal afspraken"] = PatientList
#
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_naMM_Voor_2020_begonnen_Ook_Afspraken_1_1.csv', index=False)


## Binaire gebruikersklasse ##
# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_with_Groups_Only_Last.csv', dtype = str)
# Overzicht2 = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_NaMM_Zonder_Uitlopers_1_1.csv', dtype = str)
#
# for i in range(len(Overzicht.Patientnummer)):
#     for j in range(len(Overzicht2.Patientnummer)):
#         if(Overzicht.Patientnummer[i] == Overzicht2.Patientnummer[j]):
#             Overzicht.Gebruikersklasse[i] = Overzicht2.Gebruikersklasse[j]
#
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_with_Groups_Only_Last_1_1.csv')



################################
### Boxplot PathwayVariantID ###
################################
# This code creates a boxplot of the mean number of appointments per pathway variant.

# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overview_Linear_Regression_inclMortality.csv', dtype = str)
# 
# def MakeMeanPathway(Overzicht, Zorgpad):
#     OverzichtGrouped = Overzicht.groupby(Zorgpad)["Aantal afspraken"].apply(list).reset_index(name='AFSPRAKEN')
#     print(OverzichtGrouped)
#     zorgpadlist = list(OverzichtGrouped[Zorgpad])
#     afsprakenlist = list(OverzichtGrouped.AFSPRAKEN)
#     afsprakenlist[0] = [float(i) for i in afsprakenlist[0]]
#     afsprakenlist[1] = [float(i) for i in afsprakenlist[1]]
#     j = zorgpadlist.index('1')
#     Mean = PE.mean(afsprakenlist[j])
#     return Mean
# 
# Mean1 = MakeMeanPathway(Overzicht, "Zorgpad1")
# Mean5 = MakeMeanPathway(Overzicht, "Zorgpad5")
# Mean6 = MakeMeanPathway(Overzicht, "Zorgpad6")
# Mean8 = MakeMeanPathway(Overzicht, "Zorgpad8")
# Mean9 = MakeMeanPathway(Overzicht, "Zorgpad9")
# #Mean33 = MakeMeanPathway(Overzicht, "Zorgpad33")
# Mean50 = MakeMeanPathway(Overzicht, "Zorgpad50")
# Mean51 = MakeMeanPathway(Overzicht, "Zorgpad51")
# Mean52 = MakeMeanPathway(Overzicht, "Zorgpad52")
# Mean53 = MakeMeanPathway(Overzicht, "Zorgpad53")
# 
# Y2 = [Mean1, Mean5, Mean6, Mean8, Mean9, Mean50, Mean51, Mean52, Mean53] #Mean33 removed
# print(Y2)
# ColorList = []
# EcList = []
# for i in range(len(Y2)):
#     if (float(Y2[i]) < 40):
#         ColorList.append('lemonchiffon')
#         EcList.append('gold')
#     if (float(Y2[i]) >= 40 and float(Y2[i]) < 80):
#         ColorList.append('navajowhite')
#         EcList.append('darkorange')
#     if (float(Y2[i]) >= 80):
#         ColorList.append('#ffc9d7')
#         EcList.append('hotpink')
# X2 = ["1","5", "6", "8", "9", "50", "51", "52", "53"] #"33" removed
# Y_pos = np.arange(len(X2))
# plt.bar(Y_pos, Y2, color=ColorList, ec=EcList)
# plt.xticks(Y_pos, X2)
# plt.title('Mean number of appointments per pathway variant')
# plt.xlabel('Pathway variant')
# plt.ylabel('Mean number of appointments')
# yellow_patch = mpatches.Patch(color='lemonchiffon', ec='gold', label='<40')
# orange_patch = mpatches.Patch(color='navajowhite', ec='darkorange', label='>=40, <80')
# pink_patch = mpatches.Patch(color='#ffc9d7', ec='hotpink', label='>=80')
# plt.legend(handles=[yellow_patch, orange_patch, pink_patch])
# plt.show()



#########################################
### Indeling PathwayVariantID Groepen ###
#########################################
# This code devides the patients in groups based on their pathway variant.

# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Afspraken_NaMM_PathwayVariantIDs_Only_Last.csv', dtype = str)
#
# Group1 = ["Zorgpad1"]
# Group2 = ["Zorgpad5","Zorgpad6","Zorgpad8","Zorgpad9"]
# Group3 = ["Zorgpad50"]
# Group4 = ["Zorgpad51","Zorgpad52"]
# Group5 = ["Zorgpad53"]
#
# GroupList1 = ['0']*len(Overzicht.Patientnummer)
# GroupList2 = ['0']*len(Overzicht.Patientnummer)
# GroupList3 = ['0']*len(Overzicht.Patientnummer)
# GroupList4 = ['0']*len(Overzicht.Patientnummer)
# GroupList5 = ['0']*len(Overzicht.Patientnummer)
#
#
# def UpdateGroupList(Data, GroupList, Group):
#     for i in range(len(Data.Patientnummer)):
#         for x in Group:
#             if(Data[x][i] == '1'):
#                 GroupList[i] = '1'
#
# UpdateGroupList(Overzicht, GroupList1, Group1)
# UpdateGroupList(Overzicht, GroupList2, Group2)
# UpdateGroupList(Overzicht, GroupList3, Group3)
# UpdateGroupList(Overzicht, GroupList4, Group4)
# UpdateGroupList(Overzicht, GroupList5, Group5)
#
# Overzicht["Groep1"] = GroupList1
# Overzicht["Groep2"] = GroupList2
# Overzicht["Groep3"] = GroupList3
# Overzicht["Groep4"] = GroupList4
# Overzicht["Groep5"] = GroupList5
#
# Overzicht.pop("Zorgpad1")
# Overzicht.pop("Zorgpad5")
# Overzicht.pop("Zorgpad6")
# Overzicht.pop("Zorgpad8")
# Overzicht.pop("Zorgpad9")
# Overzicht.pop("Zorgpad33")
# Overzicht.pop("Zorgpad50")
# Overzicht.pop("Zorgpad51")
# Overzicht.pop("Zorgpad52")
# Overzicht.pop("Zorgpad53")
#
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_with_Groups_Only_Last.csv', index=False)



#######################
### Means per group ###
#######################
# Code that prints results of total and mean number of consultations for three different groups based on the patient's pathway variant. 

# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_with_Groups_Only_Last_1_1.csv', dtype = str)
#
# GroupList = [None]*len(Overzicht.Patientnummer)
# for i in range(len(Overzicht.Patientnummer)):
#     if (Overzicht.Groep1[i] == "1"):
#         GroupList[i] = "1"
#     if (Overzicht.Groep2[i] == "1" or Overzicht.Groep3[i] == "1"):
#         GroupList[i] = "2"
#     if (Overzicht.Groep4[i] == "1" or Overzicht.Groep5[i] == "1"):
#         GroupList[i] = "3"
#
# print(GroupList)
#
# Total1 = 0
# Length1 = 0
# TU1 = 0
# LU1 = 0
# TNU1 = 0
# LNU1 = 0
# Total2 = 0
# Length2 = 0
# TU2 = 0
# LU2 = 0
# TNU2 = 0
# LNU2 = 0
# Total3 = 0
# Length3 = 0
# TU3 = 0
# LU3 = 0
# TNU3 = 0
# LNU3 = 0
# for i in range(len(Overzicht.Patientnummer)):
#     if (GroupList[i] == "1"):
#         Total1 += int(Overzicht["Aantal consulten"][i])
#         Length1 += 1
#         if (Overzicht.Gebruikersklasse[i] == "1"):
#             TU1 += int(Overzicht["Aantal consulten"][i])
#             LU1 += 1
#         else:
#             TNU1 += int(Overzicht["Aantal consulten"][i])
#             LNU1 += 1
#     if (GroupList[i] == "2"):
#         Total2 += int(Overzicht["Aantal consulten"][i])
#         Length2 += 1
#         if (Overzicht.Gebruikersklasse[i] == "1"):
#             TU2 += int(Overzicht["Aantal consulten"][i])
#             LU2 += 1
#         else:
#             TNU2 += int(Overzicht["Aantal consulten"][i])
#             LNU2 += 1
#     if (GroupList[i] == "3"):
#         Total3 += int(Overzicht["Aantal consulten"][i])
#         Length3 += 1
#         if (Overzicht.Gebruikersklasse[i] == "1"):
#             TU3 += int(Overzicht["Aantal consulten"][i])
#             LU3 += 1
#         else:
#             TNU3 += int(Overzicht["Aantal consulten"][i])
#             LNU3 += 1
#
# Mean1 = Total1/Length1
# Mean2 = Total2/Length2
# Mean3 = Total3/Length3
#
# MU1 = TU1/LU1
# MNU1 = TNU1/LNU1
# MU2 = TU2/LU2
# MNU2 = TNU2/LNU2
# MU3 = TU3/LU3
# MNU3 = TNU3/LNU3
#
# print("For group 1 users on average have ", MU1, " consults. Non-users have ", MNU1, " consults on average.", LU1, "   ", LNU1)
# print("For group 2 users on average have ", MU2, " consults. Non-users have ", MNU2, " consults on average.", LU2, "   ", LNU2)
# print("For group 3 users on average have ", MU3, " consults. Non-users have ", MNU3, " consults on average.", LU3, "   ", LNU3)
# print(Mean1, "    ", Mean2, "    ", Mean3)



###########################
### Opschonen Overzicht ###
###########################
# This code was used to clean up the overview a bit.

# NAMES = ["Patientnummer","Aantal consulten","Aantal logins","Gebruikersklasse","Groep1","Groep2","Groep3","Groep4","Groep5","Begin","Einde","Lengte traject","Leeftijd"]
# Overzicht = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_with_Groups_1_1_Met_Leeftijd.csv',skiprows = 1, usecols=[4,5,6,7,8,9,10,11,12,13,14,15,16], names=NAMES, header = None, dtype = str)
#
# print(Overzicht)
#
# Overzicht2 = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Borstkanker_naMM_Zonder_Uitlopers.csv', dtype = str)
#
# PatientList = [None]*len(Overzicht.Patientnummer)
# for i in range(len(Overzicht.Patientnummer)):
#     for j in range(len(Overzicht2.Patientnummer)):
#         if(Overzicht.Patientnummer[i] == Overzicht2.Patientnummer[j]):
#             PatientList[i] = Overzicht2["Aantal Afspraken"][j]
#
# Overzicht["Aantal afspraken"] = PatientList
#
# Names = ["Index", "PATIENTNUMBER", "PATHWAYID", "PATIENTID","DATETIME","PATHWAYVARIANTID","No WAYPOINT","No CAREPROVIDER","No LOCATION","No ARTICLE","No CHECKLIST"]
# Pathways = pd.read_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Pathways_Mix_NoDoubles.csv', skiprows = 1, usecols=[0,1,2,3,4,5,6,7,8,9,10], names=Names, header = None, dtype = str)
#
# def GivePathwaysStats(Pathways, ActivityTypeString):
#     PathwaysGrouped = Pathways.groupby('PATIENTNUMBER')[ActivityTypeString].apply(list).reset_index(name='ACTIVITY')
#     patientlist = list(PathwaysGrouped.PATIENTNUMBER)
#     activitylist = list(PathwaysGrouped.ACTIVITY)
#     Stats = [patientlist, activitylist]
#     return Stats
#
# WPStats = GivePathwaysStats(Pathways, "No WAYPOINT")
# CPStats = GivePathwaysStats(Pathways, "No CAREPROVIDER")
# LOCStats = GivePathwaysStats(Pathways, "No LOCATION")
# ARTStats = GivePathwaysStats(Pathways, "No ARTICLE")
# CLStats = GivePathwaysStats(Pathways, "No CHECKLIST")
#
# WPcolumn = ["0"]*len(Overzicht.Patientnummer)
# CPcolumn = ["0"]*len(Overzicht.Patientnummer)
# LOCcolumn = ["0"]*len(Overzicht.Patientnummer)
# ARTcolumn = ["0"]*len(Overzicht.Patientnummer)
# CLcolumn = ["0"]*len(Overzicht.Patientnummer)
# ActivityColumn = ["0"]*len(Overzicht.Patientnummer)
#
# def StatSum(Stat):
#     sum = 0
#     for x in Stat:
#         sum += int(x)
#     return str(sum)
#
# for i in range(len(Overzicht.Patientnummer)):
#     for j in range(len(WPStats[0])):
#         if (Overzicht.Patientnummer[i] == WPStats[0][j]):
#             WPcolumn[i] = StatSum(WPStats[1][j])
#             CPcolumn[i] = StatSum(CPStats[1][j])
#             LOCcolumn[i] = StatSum(LOCStats[1][j])
#             ARTcolumn[i] = StatSum(ARTStats[1][j])
#             CLcolumn[i] = StatSum(CLStats[1][j])
#             ActivityColumn[i] = int(CPcolumn[i]) + int(LOCcolumn[i]) + int(ARTcolumn[i]) + int(CLcolumn[i])
#
# Overzicht["Waypoint"] = WPcolumn
# Overzicht["Careprovider"] = CPcolumn
# Overzicht["Location"] = LOCcolumn
# Overzicht["Article"] = ARTcolumn
# Overzicht["Checklist"] = CLcolumn
# Overzicht["Activity"] = ActivityColumn
#
# Overzicht.to_csv(r'C:\Users\peerc\Documents\Uni\Scriptie+Stage\Files\JBZ data\Overzicht_Consulten_Na_MM_Alle_Info.csv', index=False)

################################
